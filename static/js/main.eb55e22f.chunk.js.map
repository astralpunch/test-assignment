{"version":3,"sources":["api/useApi.ts","api/utils/snakeCaseToCamel.ts","api/utils/validateData.ts","api/ApiClient.ts","api/utils/createAxiosInstance.ts","api/types/Movie.ts","api/types/Dates.ts","api/types/endpoints/getUpcomingMovies.ts","api/types/Actor.ts","api/types/endpoints/searchActors.ts","api/TmdbApi.ts","screens/Movies/components/Movie/styles.ts","screens/Movies/components/Movie/index.tsx","screens/Movies/components/Movie/hooks.ts","screens/Movies/components/MoviesList/styles.ts","screens/Movies/components/MoviesList/index.tsx","screens/Movies/components/MoviesList/hooks.ts","components/Navigation/index.tsx","screens/Movies/index.tsx","screens/Actors/components/ActorsList/styles.ts","screens/Actors/components/ActorsList/index.tsx","screens/Actors/components/ActorsList/hooks.ts","screens/Actors/components/Actor/styles.ts","screens/Actors/components/Actor/index.tsx","screens/Actors/components/Actor/hooks.ts","screens/Actors/index.tsx","components/Header/index.tsx","components/Root.tsx","App.tsx","index.tsx"],"names":["ApiContext","createContext","useApi","useContext","snakeCaseToCamel","obj","processVal","val","undefined","Array","isArray","map","Object","fromEntries","entries","key","replace","segment","toUpperCase","validateData","dataType","data","pipe","decode","fold","error","console","PathReporter","report","left","t","ApiClient","config","axiosInstance","this","defaultAxiosTransformers","axios","defaults","transformResponse","create","baseURL","url","headers","Authorization","token","concat","withCredentials","createAxiosInstance","requestConfig","requestType","responseType","requestData","request","params","then","response","MovieRuntype","posterPath","adult","overview","releaseDate","genreIds","id","originalTitle","originalLanguage","title","backdropPath","popularity","voteCount","video","voteAverage","Dates","maximum","minimum","GetUpcomingMoviesResponseRuntype","page","results","dates","totalPages","totalResults","ActorRuntype","profilePath","knownFor","name","SearchActorsResponseRuntype","SearchActorsRequestRuntype","query","TmdbApi","getUpcomingMovies","createRequest","method","searchActors","getActorDetails","personId","getMovieDetails","movieId","useStyles","makeStyles","theme","posterImg","maxWidth","height","cardContent","display","breakpoints","down","media","width","margin","Movie","styles","movie","useState","actor","saveMovie","api","useEffect","a","fetch","useFetchMovie","useParams","Card","className","CardMedia","component","image","CardContent","CardHeader","subheader","Typography","runtime","variant","tagline","MoviesList","movies","setData","result","filter","elem","useFetchUpcomingMovies","GridList","cellHeight","cols","spacing","GridListTile","Link","to","src","alt","GridListTileBar","subtitle","content","justifyContent","alignContent","search","lineHeight","Navigation","props","Paper","Tab","NavLink","activeClassName","label","isSearchable","Input","onChange","onSearch","placeholder","Movies","match","useRouteMatch","exact","path","ActorsList","searchText","setSearchText","actors","event","target","debounce","value","debouncedSearch","useFetchActors","length","join","align","alignItems","Actor","actorId","saveActor","useFetchActor","color","biography","Actors","Header","AppBar","position","Root","Container","from","tmdbConfig","App","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb55e22f.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\n\r\nimport { TmdbApi } from \"./TmdbApi\";\r\n\r\nexport const ApiContext = createContext<TmdbApi | null>(null);\r\n\r\nexport const useApi = () => {\r\n  const api = useContext(ApiContext);\r\n\r\n  return api;\r\n};\r\n","export const snakeCaseToCamel = (obj: Record<string, any>) => {\r\n  type valueType = string | Record<string, any>[] | Record<string, any>;\r\n\r\n  const processVal = (val: valueType): valueType => {\r\n    if (typeof val !== \"object\" || val === null || val === undefined) {\r\n      return val;\r\n    }\r\n\r\n    if (Array.isArray(val)) {\r\n      return val.map(processVal);\r\n    }\r\n\r\n    return snakeCaseToCamel(val);\r\n  };\r\n\r\n  return Object.fromEntries(\r\n    Object.entries(obj).map(([key, val]) => [\r\n      key.replace(/_(.)/g, (segment) => segment[1].toUpperCase()),\r\n      processVal(val),\r\n    ]),\r\n  );\r\n};\r\n","import * as t from \"io-ts\";\r\nimport { PathReporter } from \"io-ts/lib/PathReporter\";\r\nimport { fold, left } from \"fp-ts/lib/Either\";\r\nimport { pipe } from \"fp-ts/lib/pipeable\";\r\n\r\nexport const validateData = (dataType: t.Mixed, data?: Record<any, any>) => {\r\n  const onLeft = (error: t.Errors) => {\r\n    console.error(PathReporter.report(left(error)));\r\n  };\r\n\r\n  if (data) {\r\n    pipe(dataType.decode(data), fold(onLeft, t.identity));\r\n  }\r\n};\r\n","import { AxiosInstance, AxiosRequestConfig } from \"axios\";\r\nimport * as t from \"io-ts\";\r\n\r\nimport { createAxiosInstance } from \"./utils/createAxiosInstance\";\r\nimport { validateData } from \"./utils/validateData\";\r\n\r\nexport interface ApiClientConfig {\r\n  url: string;\r\n  token: string;\r\n}\r\n\r\nexport class ApiClient {\r\n  protected axiosInstance: AxiosInstance;\r\n\r\n  constructor(config: ApiClientConfig) {\r\n    this.axiosInstance = createAxiosInstance(config);\r\n  }\r\n\r\n  protected createRequest<ReqT, RespT>(\r\n    requestConfig: Required<Pick<AxiosRequestConfig, \"method\" | \"url\">>,\r\n    requestType: t.Mixed,\r\n    responseType: t.Mixed,\r\n  ) {\r\n    return (requestData: ReqT) => {\r\n      validateData(requestType, requestData);\r\n\r\n      const requestPromise = this.axiosInstance.request({ ...requestConfig, params: requestData });\r\n\r\n      return requestPromise.then(\r\n        (response): RespT => {\r\n          validateData(responseType, response.data);\r\n\r\n          return response.data;\r\n        },\r\n      );\r\n    };\r\n  }\r\n}\r\n","import axios, { AxiosTransformer } from \"axios\";\r\n\r\nimport { snakeCaseToCamel } from \"./snakeCaseToCamel\";\r\nimport { ApiClientConfig } from \"../ApiClient\";\r\n\r\nexport const createAxiosInstance = (config: ApiClientConfig) => {\r\n  const defaultAxiosTransformers = axios.defaults.transformResponse as AxiosTransformer[];\r\n\r\n  return axios.create({\r\n    baseURL: config.url,\r\n    headers: { Authorization: `Bearer ${config.token}` },\r\n    transformResponse: defaultAxiosTransformers.concat(snakeCaseToCamel),\r\n    withCredentials: false,\r\n  });\r\n};\r\n","import * as t from \"io-ts\";\r\n\r\nexport const MovieRuntype = t.partial({\r\n  posterPath: t.union([t.string, t.null]),\r\n  adult: t.boolean,\r\n  overview: t.string,\r\n  releaseDate: t.string,\r\n  genreIds: t.array(t.number),\r\n  id: t.number,\r\n  originalTitle: t.string,\r\n  originalLanguage: t.string,\r\n  title: t.string,\r\n  backdropPath: t.union([t.string, t.null]),\r\n  popularity: t.number,\r\n  voteCount: t.number,\r\n  video: t.boolean,\r\n  voteAverage: t.number,\r\n});\r\n\r\nexport type Movie = t.TypeOf<typeof MovieRuntype>;\r\n","import * as t from \"io-ts\";\r\n\r\nexport const Dates = t.interface({\r\n  maximum: t.string,\r\n  minimum: t.string,\r\n});\r\n","import * as t from \"io-ts\";\r\n\r\nimport { MovieRuntype } from \"../Movie\";\r\nimport { Dates } from \"../Dates\";\r\n\r\nexport const GetUpcomingMoviesResponseRuntype = t.partial({\r\n  page: t.number,\r\n  results: t.array(MovieRuntype),\r\n  dates: Dates,\r\n  totalPages: t.number,\r\n  totalResults: t.number,\r\n});\r\n\r\nexport type GetUpcomingMoviesResponse = t.TypeOf<typeof GetUpcomingMoviesResponseRuntype>;\r\n","import * as t from \"io-ts\";\r\n\r\nimport { MovieRuntype } from \"./Movie\";\r\n\r\nexport const ActorRuntype = t.partial({\r\n  profilePath: t.union([t.string, t.null]),\r\n  adult: t.boolean,\r\n  id: t.number,\r\n  knownFor: t.array(MovieRuntype),\r\n  name: t.string,\r\n  popularity: t.number,\r\n});\r\n\r\nexport type Actor = t.TypeOf<typeof ActorRuntype>;\r\n","import * as t from \"io-ts\";\r\n\r\nimport { ActorRuntype } from \"../Actor\";\r\n\r\nexport const SearchActorsResponseRuntype = t.partial({\r\n  page: t.number,\r\n  results: t.array(ActorRuntype),\r\n  totalPages: t.number,\r\n  totalResults: t.number,\r\n});\r\n\r\nexport const SearchActorsRequestRuntype = t.interface({\r\n  query: t.string,\r\n});\r\n\r\nexport type SearchActorsRequest = t.TypeOf<typeof SearchActorsRequestRuntype>;\r\nexport type SearchActorsResponse = t.TypeOf<typeof SearchActorsResponseRuntype>;\r\n","import * as t from \"io-ts\";\r\n\r\nimport { ApiClient } from \"./ApiClient\";\r\n\r\nimport {\r\n  GetUpcomingMoviesResponseRuntype,\r\n  GetUpcomingMoviesResponse,\r\n} from \"./types/endpoints/getUpcomingMovies\";\r\nimport {\r\n  SearchActorsRequest,\r\n  SearchActorsResponse,\r\n  SearchActorsRequestRuntype,\r\n  SearchActorsResponseRuntype,\r\n} from \"./types/endpoints/searchActors\";\r\nimport { GetActorDetailsResponse } from \"./types/endpoints/getActorDetails\";\r\nimport { GetMovieDetailsResponse } from \"./types/endpoints/getMovieDetails\";\r\n\r\nexport class TmdbApi extends ApiClient {\r\n  getUpcomingMovies = this.createRequest<void, GetUpcomingMoviesResponse>(\r\n    { url: \"/movie/upcoming\", method: \"get\" },\r\n    t.void,\r\n    GetUpcomingMoviesResponseRuntype,\r\n  );\r\n\r\n  searchActors = this.createRequest<SearchActorsRequest, SearchActorsResponse>(\r\n    { url: \"/search/person\", method: \"get\" },\r\n    SearchActorsRequestRuntype,\r\n    SearchActorsResponseRuntype,\r\n  );\r\n\r\n  getActorDetails = (personId: string) =>\r\n    this.createRequest<void, GetActorDetailsResponse>(\r\n      { url: `/person/${personId}`, method: \"get\" },\r\n      SearchActorsRequestRuntype,\r\n      SearchActorsResponseRuntype,\r\n    )();\r\n\r\n  getMovieDetails = (movieId: string) =>\r\n    this.createRequest<void, GetMovieDetailsResponse>(\r\n      { url: `/movie/${movieId}`, method: \"get\" },\r\n      SearchActorsRequestRuntype,\r\n      SearchActorsResponseRuntype,\r\n    )();\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  posterImg: {\r\n    maxWidth: \"100%\",\r\n    height: \"auto\",\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n\r\n  media: {\r\n    width: \"500px\",\r\n    height: \"700px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: \"auto\",\r\n      margin: \"auto\",\r\n    },\r\n  },\r\n  overview: {\r\n    width: \"400px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"auto\",\r\n    },\r\n  },\r\n}));\r\n","import React from \"react\";\r\nimport { CardContent, CardMedia, CardHeader, Typography, Card } from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useStyles } from \"./styles\";\r\nimport { useFetchMovie } from \"./hooks\";\r\n\r\nexport const Movie: React.FC = () => {\r\n  const styles = useStyles();\r\n  const { movieId } = useParams();\r\n  const movie = useFetchMovie(movieId as string);\r\n\r\n  return movie ? (\r\n    <Card>\r\n      <div className={styles.cardContent}>\r\n        <div className={styles.media}>\r\n          <CardMedia\r\n            className={styles.posterImg}\r\n            component=\"img\"\r\n            image={`https://image.tmdb.org/t/p/w780/${movie.posterPath}`}\r\n            title={movie.title}\r\n          />\r\n        </div>\r\n        <CardContent>\r\n          <CardHeader\r\n            title={movie.title}\r\n            subheader={\r\n              <Typography>\r\n                {movie.releaseDate}, {movie.runtime}m\r\n              </Typography>\r\n            }\r\n          />\r\n          <Typography variant=\"h5\">{movie.tagline}</Typography>\r\n          <Typography className={styles.overview} variant=\"body2\" component=\"p\">\r\n            {movie.overview}\r\n          </Typography>\r\n        </CardContent>\r\n      </div>\r\n    </Card>\r\n  ) : null;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { useApi } from \"api/useApi\";\r\nimport { GetMovieDetailsResponse } from \"api/types/endpoints/getMovieDetails\";\r\n\r\nexport const useFetchMovie = (movieId: string) => {\r\n  const [actor, saveMovie] = useState<GetMovieDetailsResponse | undefined>();\r\n  const api = useApi();\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const response = await api?.getMovieDetails(movieId);\r\n\r\n        saveMovie(response);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetch();\r\n  }, [api, movieId]);\r\n\r\n  return actor;\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n  posterImg: {\r\n    maxWidth: \"100%\",\r\n    height: \"auto\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { GridList, GridListTile, GridListTileBar } from \"@material-ui/core\";\r\n\r\nimport { useFetchUpcomingMovies } from \"./hooks\";\r\n\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport const MoviesList: React.FC = () => {\r\n  const styles = useStyles();\r\n  const movies = useFetchUpcomingMovies();\r\n\r\n  return (\r\n    <>\r\n      <GridList cellHeight=\"auto\" cols={3} spacing={15}>\r\n        {movies\r\n          ? movies.map((movie) => (\r\n              <GridListTile component={Link} to={`/movies/${movie.id}`} key={movie.id}>\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w500/${movie.posterPath}`}\r\n                  alt={movie.title}\r\n                  className={styles.posterImg}\r\n                />\r\n                <GridListTileBar title={movie.title} subtitle={movie.releaseDate} />\r\n              </GridListTile>\r\n            ))\r\n          : []}\r\n      </GridList>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { useApi } from \"api/useApi\";\r\nimport { Movie } from \"api/types/Movie\";\r\n\r\nexport const useFetchUpcomingMovies = () => {\r\n  const api = useApi();\r\n  const [data, setData] = useState<Movie[] | undefined>();\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const response = await api?.getUpcomingMovies();\r\n\r\n        const result = response?.results?.filter((elem) => !!elem.posterPath);\r\n\r\n        setData(result);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetch();\r\n  }, [api]);\r\n\r\n  return data;\r\n};\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { Paper, Tab, Input, makeStyles } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  isSearchable?: boolean;\r\n  onSearch?: (event: SyntheticEvent) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  content: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    alignContent: \"center\",\r\n  },\r\n  search: {\r\n    lineHeight: \"30px\",\r\n  },\r\n});\r\n\r\nexport const Navigation: React.FC<Props> = (props) => {\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <Paper className={styles.content}>\r\n      <div>\r\n        <Tab\r\n          component={NavLink}\r\n          activeClassName=\"Mui-selected\"\r\n          to=\"/movies\"\r\n          label=\"Upcoming Movies\"\r\n        />\r\n        <Tab component={NavLink} activeClassName=\"Mui-selected\" to=\"/actors\" label=\"Actors\" />\r\n      </div>\r\n      {props.isSearchable && (\r\n        <Input className={styles.search} onChange={props.onSearch} placeholder=\"Search\" />\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRouteMatch, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { Movie } from \"./components/Movie\";\r\nimport { MoviesList } from \"./components/MoviesList\";\r\nimport { Navigation } from \"components/Navigation\";\r\n\r\nexport const Movies: React.FC = () => {\r\n  const match = useRouteMatch();\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <Switch>\r\n        <Route exact path={match.path}>\r\n          <MoviesList />\r\n        </Route>\r\n        <Route path={`${match.path}/:movieId`}>\r\n          <Movie />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n  posterImg: {\r\n    maxWidth: \"100%\",\r\n    height: \"auto\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { GridList, GridListTile, GridListTileBar, Typography } from \"@material-ui/core\";\r\nimport { Navigation } from \"components/Navigation\";\r\n\r\nimport { useFetchActors } from \"./hooks\";\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport const ActorsList: React.FC = () => {\r\n  const styles = useStyles();\r\n  const match = useRouteMatch();\r\n  const { actors, onSearch } = useFetchActors();\r\n\r\n  return (\r\n    <>\r\n      <Navigation isSearchable={true} onSearch={onSearch} />\r\n      {actors && actors.length > 0 ? (\r\n        <GridList cellHeight=\"auto\" cols={3} spacing={15}>\r\n          {actors.map((actor) => (\r\n            <GridListTile component={Link} to={`${match.path}/${actor.id}`} key={actor.id}>\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w500/${actor.profilePath}`}\r\n                alt={actor.name}\r\n                className={styles.posterImg}\r\n              />\r\n              <GridListTileBar\r\n                title={actor.name}\r\n                subtitle={actor.knownFor?.map((elem) => elem.originalTitle).join(\", \")}\r\n              />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n      ) : (\r\n        <Typography align=\"center\" variant=\"h3\">\r\n          No results found\r\n        </Typography>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState, SyntheticEvent } from \"react\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nimport { useApi } from \"api/useApi\";\r\nimport { Actor } from \"api/types/Actor\";\r\n\r\nexport const useFetchActors = () => {\r\n  const api = useApi();\r\n  const [data, setData] = useState<Actor[]>();\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const onSearch = (event: SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n\r\n    const debouncedSearch = debounce(() => {\r\n      setSearchText(target.value);\r\n    }, 400);\r\n\r\n    debouncedSearch();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const response = await api?.searchActors({ query: searchText });\r\n\r\n        const result = response?.results?.filter((elem) => !!elem.profilePath);\r\n\r\n        setData(result);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    if (searchText) {\r\n      fetch();\r\n    } else {\r\n      setData([]);\r\n    }\r\n  }, [api, searchText]);\r\n\r\n  return { actors: data, onSearch };\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  posterImg: {\r\n    maxWidth: \"100%\",\r\n    height: \"auto\",\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n  media: {\r\n    width: \"500px\",\r\n    height: \"700px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: \"auto\",\r\n      margin: \"auto\",\r\n    },\r\n  },\r\n  overview: {\r\n    width: \"400px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"auto\",\r\n    },\r\n  },\r\n}));\r\n","import React from \"react\";\r\nimport { CardContent, CardMedia, CardHeader, Typography, Card } from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useFetchActor } from \"./hooks\";\r\n\r\nimport { Navigation } from \"components/Navigation\";\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport const Actor: React.FC = () => {\r\n  const styles = useStyles();\r\n  const { actorId } = useParams();\r\n  const actor = useFetchActor(actorId as string);\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      {actor ? (\r\n        <Card className={styles.cardContent}>\r\n          <div className={styles.media}>\r\n            <CardMedia\r\n              alt={actor.name}\r\n              className={styles.posterImg}\r\n              component=\"img\"\r\n              image={`https://image.tmdb.org/t/p/w780/${actor.profilePath}`}\r\n              title={actor.name}\r\n            />\r\n          </div>\r\n          <CardContent>\r\n            <CardHeader title={actor.name} />\r\n            <Typography\r\n              className={styles.overview}\r\n              variant=\"body2\"\r\n              color=\"textSecondary\"\r\n              component=\"p\"\r\n            >\r\n              {actor.biography}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { useApi } from \"api/useApi\";\r\nimport { GetActorDetailsResponse } from \"api/types/endpoints/getActorDetails\";\r\n\r\nexport const useFetchActor = (actorId: string) => {\r\n  const [actor, saveActor] = useState<GetActorDetailsResponse | undefined>();\r\n  const api = useApi();\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const response = await api?.getActorDetails(actorId);\r\n\r\n        saveActor(response);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetch();\r\n  }, [api, actorId]);\r\n\r\n  return actor;\r\n};\r\n","import React from \"react\";\r\nimport { useRouteMatch, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { ActorsList } from \"./components/ActorsList\";\r\nimport { Actor } from \"./components/Actor\";\r\n\r\nexport const Actors: React.FC = () => {\r\n  const match = useRouteMatch();\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route exact path={match.path}>\r\n          <ActorsList />\r\n        </Route>\r\n        <Route path={`${match.path}/:actorId`}>\r\n          <Actor />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { AppBar, Typography } from \"@material-ui/core\";\r\n\r\nexport const Header: React.FC = () => {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Typography align=\"center\" variant=\"h4\">\r\n        Movie Searcher\r\n      </Typography>\r\n    </AppBar>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nimport { Movies } from \"../screens/Movies\";\r\nimport { Actors } from \"../screens/Actors\";\r\n\r\nimport { Header } from \"./Header\";\r\n\r\nexport const Root: React.FC = () => {\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/movies\">\r\n          <Movies />\r\n        </Route>\r\n        <Route path=\"/actors\">\r\n          <Actors />\r\n        </Route>\r\n        <Redirect exact from=\"/\" to=\"/movies\" />\r\n      </Switch>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\n\nimport { ApiContext } from \"./api/useApi\";\nimport { tmdb as tmdbConfig } from \"./config.json\";\nimport { TmdbApi } from \"./api/TmdbApi\";\n\nimport { Root } from \"./components/Root\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst api = new TmdbApi(tmdbConfig);\n\nconst App: React.FC = () => {\n  return (\n    <ApiContext.Provider value={api}>\n      <BrowserRouter>\n        <Root />\n      </BrowserRouter>\n    </ApiContext.Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}